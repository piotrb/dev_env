"set mouse=a
"set ttymouse=xterm2

set shortmess+=I

"color sunburst
color distinguished
"color wombat
"color calmar256-dark
"color jellybeans
"let g:solarized_termcolors=256
"se background=dark
"color solarized

function! CommandCabbr(abbreviation, expansion)
  execute 'cabbr ' . a:abbreviation . ' <c-r>=getcmdpos() == 1 && getcmdtype() == ":" ? "' . a:expansion . '" : "' . a:abbreviation . '"<CR>'
endfunction
command! -nargs=+ CommandCabbr call CommandCabbr(<f-args>)
" Use it on itself to define a simpler abbreviation for itself.
CommandCabbr ccab CommandCabbr

se nocursorline
se nocursorcolumn

"autocmd WinEnter * setlocal cursorline
"autocmd WinLeave * setlocal nocursorline

"autocmd WinEnter * setlocal cursorcolumn
"autocmd WinLeave * setlocal nocursorcolumn

"se cursorline
"se cursorcolumn
"hi CursorLine   ctermbg=233 guibg=#202020
"hi CursorColumn ctermbg=233 guibg=#202020

hi Cursor       guibg=#999999 guifg=#000000
hi SpecialKey   guifg=gray guibg=#660000

hi StatusLine cterm=NONE ctermbg=darkgreen ctermfg=black gui=bold guibg=green guifg=black
hi StatusLineNC cterm=NONE ctermbg=black ctermfg=lightgray gui=bold guibg=black guifg=lightgray

nmap <Leader>N :NERDTreeFind<CR>

map <Leader>ms :MSExecCmd<space>

nmap <Leader>= :tabnew<cr>
nmap <Leader>- :tabclose<cr>
nmap <Leader>, :tabprevious<cr>
nmap <Leader>. :tabnext<cr>

highlight ExtraWhitespace ctermbg=red guibg=red ctermfg=gray guifg=gray
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" sets the clipboard to the system clipboard
"set clipboard=unnamed

let g:miniBufExplVSplit = 20
let g:tagbar_ctags_bin = "/usr/local/bin/ctags"
let g:ackprg = 'ag --nogroup --nocolor --column'

set foldmethod=syntax
set foldlevelstart=20
set foldnestmax=5

"autocmd BufWinLeave *.* mkview
"autocmd BufWinEnter *.* silent loadview

autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \ exe "normal g`\"" |
    \ endif

" quick pane switching
map <c-h> <C-w>h
map <c-j> <C-w>j
map <c-k> <C-w>k
map <c-l> <C-w>l

map <Leader>wq <C-w>q

map <Leader>w<Left> <C-w>h
map <Leader>w<Down> <C-w>j
map <Leader>w<Up> <C-w>k
map <Leader>w<Right> <C-w>l

map <Leader>W<Left>  <C-w>H
map <Leader>W<Down>  <C-w>J
map <Leader>W<Up>    <C-w>K
map <Leader>W<Right> <C-w>L

" text mode fixes

"if !has("gui_macvim") || !has("gui_running")
  "map <c-t> :CtrlP<CR>
  "imap <c-t> <ESC>:CtrlP<CR>
"endif

set statusline=%f\ %m\ %r

"Sourced from vim tip: http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

" additional syntax stuff

au BufNewFile,BufRead *.god set filetype=ruby
au BufNewFile,BufRead *.rxls set filetype=ruby


set hlsearch      " highlight search terms
set incsearch     " show search matches as you type

set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

set nobackup
set noswapfile

python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup

set tags+=gems.tags



" Rspec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

let g:rspec_command = "Dispatch spring rspec {spec}"
